@inject IMessagingService MessagingService
@using System.Diagnostics
@using Blazor.Messaging.Demo.Messages
@implements IDisposable

<h3>Notification Component with exception @Id</h3>

<p>@_notification</p>

@code {

    private string _notification = "Waiting for login...";

    [Inject]
    public IHttpContextAccessor HttpContextAccessor { get; set; }

    [Parameter]
    public string? Id { get; set; }
    /// <summary>
    /// Check for prerendering mode. Version for .NET 8
    /// </summary>
    private bool IsPrerendering
    {
        get
        {
            return HttpContextAccessor.HttpContext?.Response.HasStarted == false;
        }
    }

    private void SyncHandler(UserLoggedInMessage message)
    {
        _notification = $"{message.Username} has logged in!";
        StateHasChanged();
        Console.WriteLine("SyncHandler throw exception");
        throw new Exception("An error occurred in the sync handler");
    }

    protected override void OnInitialized()
    {
        if (!IsPrerendering)
        {
            MessagingService.Subscribe<UserLoggedInMessage>(SyncHandler);
            Debug.WriteLine("Subscribed to UserLoggedInMessage in OnInitialized after prerendering");
        }
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await base.OnAfterRenderAsync(firstRender);
    //     if (firstRender)
    //     {
    //         //don't use OnInitialzedXxx as it will be called by prerendering too
    //         MessagingService.Subscribe<UserLoggedInMessage>(SyncHandler);
    //         Debug.WriteLine("Subscribed to UserLoggedInMessage in OnAfterRenderAsync");
    //     }
    // }

    public void Dispose()
    {
        MessagingService.Unsubscribe<UserLoggedInMessage>(SyncHandler);
        Debug.WriteLine("UnSubscribe from UserLoggedInMessage in Dispose");
    }

}