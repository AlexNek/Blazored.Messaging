@using System.Diagnostics
@using Blazor.Messaging
@using Blazor.Messaging.Demo.Messages
@inject IMessagingService MessagingService
@implements IDisposable

<h3>Login Component</h3>

<input @bind="_username" placeholder="Enter username" />
@if (!_isPrerendering)
{
    <button @onclick="PublishLogin" disabled="@(_isPublishing)">Log In</button>
}

@if (_errorMessages.Any())
{
    <div style="color:red">
        <p>Errors occurred:</p>
        <ul>
            @foreach (var error in _errorMessages)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

@code {
    private string _username = string.Empty;
    private bool _isPublishing = false;
    private List<string> _errorMessages = new();

    private bool _isPrerendering = true; 

    /// <summary>
    /// Check for prerendering mode. Version for .NET 9
    /// </summary>
    private bool IsPrerendering
    {
        get
        {
            // True if not interactive (prerendering or static) AND an interactive mode is assigned (excludes static SSR)
            return !RendererInfo.IsInteractive && AssignedRenderMode != null;
        }
    }

   protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _isPrerendering = IsPrerendering;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            //don't use OnInitialzedXxx as it will be called by prerendering too
            MessagingService.HandlerExceptionOccurred += OnHandlerExceptionOccurred;
            Debug.WriteLine("Subscribed to HandlerExceptionOccurred in OnAfterRenderAsync");
        }
    }

    private void OnHandlerExceptionOccurred(object? sender, HandlerExceptionEventArgs e)
    {
        _errorMessages.Add($"{e.SubscriberInfo} - {e.Exception.Message}");
        Debug.WriteLine($"Exception logged: {e.SubscriberInfo} - {e.Exception.Message}");
        StateHasChanged();
    }

    private async Task PublishLogin()
    {
        _isPublishing = true;
        _errorMessages.Clear(); // Reset errors for new publish attempt

        try
        {
            var message = new UserLoggedInMessage { Username = _username };
            await MessagingService.Publish(message);
            _username = string.Empty;
        }
        catch (TimeoutException ex)
        {
            _errorMessages.Add($"Publish timeout: {ex.Message}");
        }
        catch (Exception ex)
        {
            _errorMessages.Add($"Unexpected error: {ex.Message}");
        }
        finally
        {
            _isPublishing = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        MessagingService.HandlerExceptionOccurred -= OnHandlerExceptionOccurred;
        Debug.WriteLine("Unsubscribed from HandlerExceptionOccurred in Dispose");
    }
}